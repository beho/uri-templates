uri_template <- (literals / expression)*;

literals <- [\\x21\\x23-\\x24\\x26\\x28-\\x3B\\x3D\\x3F-\\x5B\\x5D\\x5F\\x61-\\x7A\\x7E]
         / ucschar
         / iprivate
         / pct_encoded;

expression <- "{" op:operator? vars:variable_list "}"
`
  [_, {op, OpBin}, {vars, Vars}, _ | []] = Node,
  Op = case OpBin of
    [] -> none;
    OpBin -> OpBin
  end,
  {expression, Op, Vars}
`;

operator <- op_level_2 / op_level_3 / op_reserve;

op_level_2 <- [\\+#];
op_level_3 <- [\\./;\\?&];
op_reserve <- [=,!@|];

variable_list <- first:varspec rest:("," varspec)*
`
  [{first, First}, {rest, Rest} | []] = Node,
  [First | lists:map( fun([_,V|[]]) -> V end, Rest)]
`;

varspec <- v:varname m:modifier_level_4?
`
  [{v, V}, {m, M}|[]] = Node,
  {varspec, V, M}
`;

varname <- first:varchar rest:(("."? varchar)*)
`
  % transform to list of binary chars while filtering optional dots
  [{first,First}, {rest, Rest} | []] = Node,
  [First|lists:filter(fun(E) -> size(E) > 0 end, lists:flatten(Rest))]
`;

varchar <- ALPHA / DIGIT / "_" / pct_encoded;

modifier_level_4 <- prefix / explode;
prefix <- ":" max_length
`
[_, L | []] = Node,
{prefix, L}
`;
max_length <- DIGIT+
`
lists:foldl(fun(<<N:8>>, A) -> A*10 + (N - $0) end, 0, Node)
`;
explode <- "*"
`
{explode}
`;

ucschar <- [\\xA0-\\x{D7FF}] / [\\x{F900}-\\x{FDCF}] / [\\x{FDF0}-\\x{FFEF}] 
         / [\\x{10000}-\\x{1FFFD}] / [\\x{20000}-\\x{2FFFD}] / [\\x{30000}-\\x{3FFFD}] 
         / [\\x{40000}-\\x{4FFFD}] / [\\x{50000}-\\x{5FFFD}] / [\\x{60000}-\\x{6FFFD}] 
         / [\\x{70000}-\\x{7FFFD}] / [\\x{80000}-\\x{8FFFD}] / [\\x{90000}-\\x{9FFFD}]
         / [\\x{A0000}-\\x{AFFFD}] / [\\x{B0000}-\\x{BFFFD}] / [\\x{C0000}-\\x{CFFFD}]
         / [\\x{D0000}-\\x{DFFFD}] / [\\x{E1000}-\\x{EFFFD}];

iprivate <- [\\x{E000}-\\x{F8FF}\\x{F0000}-\\x{FFFFD}\\x{100000}-\\x{10FFFD}];

pct_encoded <- '%' HEXDIG HEXDIG
`
[_, A, B | []] = Node,
{pct, A, B}
`;

ALPHA <- [a-zA-Z];
DIGIT <- [0-9];
HEXDIG <- [0-9a-fA-F];